#+TITLE: 離散 Fourier 変換
#+SUBTITLE: 信号処理 - 第11講
#+AUTHOR: 村田 昇
#+EMAIL: noboru.murata@eb.waseda.ac.jp
#+DATE:
# Time-stamp: <2023-07-06 22:13:48 mura>
:REVEAL:
#+INCLUDE: "./reveal.js/org/mycourse.org"
#+STARTUP: hidestars content indent
# C-c C-x C-v でinlineを切り替え
# <m C-i でlatex block (math env用)
# C-c '
:END:

* COMMENT メモ
- 校正に関して記述

* 前回のおさらい
** デジタル信号処理
- 計算機で信号を扱うための方法論
- 処理の流れ
  - アナログ信号をデジタル信号に変換 (A/D変換)
  - 計算機上でデジタル信号を処理
  - デジタル信号をアナログ信号に変換 (D/A変換)

** 標本化と量子化
- デジタル信号に変換するための離散化
  - 標本化 (sampling) : 時間の離散化
  - 量子化 (quantization) : 数値の離散化

** 標本化定理
- 定理
  #+begin_quote
  信号 \(f(t)\) が \(B\,[\mathrm{Hz}]\) 未満の周波数しか含んでいないなら，
  \(1/2B\,[s]\) ごとのサンプル点を用いて元の信号は完全に求められる．
  #+end_quote

#+NAME: fig:draw10
#+ATTR_HTML: :width 80%
#+ATTR_LATEX: :width 0.5\linewidth
[[file:figs/信号処理 10.png]]

** 標本化における用語
- 1秒間に取るサンプル数 \(f_{s}\,[\mathrm{Hz}]\): \\
  *サンプリング周波数*
- 再構成に必要なサンプリング周波数の下限 \(2B\,[\mathrm{Hz}]\): \\
  *Nyquist レート*
- 信号に含まれる周波数の上限 \(B\,[\mathrm{Hz}]\): \\
  *Nyquist 周波数*
- /[[color:orange][角周波数と周波数の関係に注意]]/

** エイリアシング
- 折り返しによる雑音
  #+begin_quote
  \(4\pi B\)
  周期の関数
  \(\tilde{f}\)
  を構成する際に重なりが生じ，
  切り出した
  \((-2\pi B,2\pi B)\)
  領域を
  元に戻すことができない．
  #+end_quote

#+NAME: fig:draw8
#+ATTR_HTML: :width 80%
#+ATTR_LATEX: :width 0.5\linewidth
[[file:figs/信号処理 8.png]]


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** COMMENT 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- サンプリング周波数
  #+begin_quote
  会話に必要な周波数帯域は \(300\,[\mathrm{Hz}]\) 以上 \(7\,[\mathrm{kHz}]\) 未満と言われている．
  テレビ会議などでこの帯域を十分に伝達するために必要なサンプリング周波数はどのようになるか答えよ．
  #+end_quote

** COMMENT 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 標本化定理によれば \(14\,[\mathrm{kHz}]\) 以上となる．
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- サンプリング周波数
  #+begin_quote
  若年者は 
  \(20\,[\mathrm{Hz}]\) から \(20\,[\mathrm{kHz}]\)
  の範囲の音を聴き分けることができると言われている．
  テレビ会議などでこの帯域を十分に伝達するために必要なサンプリング周波数はどのようになるか答えよ．
  #+end_quote

** COMMENT 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 標本化定理によれば \(40\,[\mathrm{kHz}]\) を越えるサンプリング周波数が必要となる．


* 離散 Fourier 変換
** 計算機による信号処理
- 連続時間では扱えない
  - 標本化により時間を離散化
  - 周波数帯を限定すれば情報は失われない
- 有限長のデータしか扱えない
  - 周期的な信号として扱う 
  - 有界な台を持つ信号として扱う

** 離散 Fourier 変換
- 定義
  #+begin_quote
  長さ \(N\) の信号 \(f(t),\;t=0,1,\dotsc,N{-}1\) の離散 Fourier 変換を以下で定義する．
  #+begin_src latex
    \begin{equation}
      \hat{f}(n)
      =\frac{1}{\sqrt{N}}\sum_{t=0}^{N{-}1}
      f(t)e^{-i\frac{2\pi}{N}nt}, \quad (n=0,1,2,\dotsc,N{-}1)
    \end{equation}
  #+end_src
  #+end_quote
  - 慣習的に周波数 \(n\) や時間 \(t\) は1ではなく0から始まる整数
  - 時間 \(\mathrm{[s]}\) や周波数 \(\mathrm{[Hz]}\) とは異なることに注意

#+reveal: split
- 逆変換
  #+begin_quote
  逆変換は以下で定義される．
  #+begin_src latex
    \begin{equation}
      f(t)
      =\frac{1}{\sqrt{N}}\sum_{n=0}^{N{-}1}
      \hat{f}(n)e^{i\frac{2\pi}{N}nt}, \quad (t=0,1,2,\dotsc,N{-}1)
    \end{equation}
  #+end_src
  #+end_quote
  - 信号 \(f\) は周期信号(基底) \(e^{i\frac{2\pi}{N}nt}\) の重ね合わせで表現される
  - 基底は \(e^{i\frac{2\pi}{N}t}\) の高調波(基本周波数の整数倍)になる
  - 各周波数信号の振幅が \(\hat{f}(n)/\sqrt{N}\) となる


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- サンプリング周波数と基本周波数
  #+begin_quote
  サンプリング周波数 \(f_{s}\,\mathrm{[Hz]}\) のデジタル信号から
  長さ \(N\) のベクトルを切り出し
  離散 Fourier 変換を考えたとき，   
  基本周波数はいくつになるか?
  #+end_quote
- 周波数の正負の関係
  #+begin_quote
  "負"の基本周波数 \(e^{-i\frac{2\pi}{N}t}\) と
  標本点 (\(t\) が整数の点)で
  同じ値を持つ正の基底 \(e^{i\frac{2\pi}{N}kt}\;(k>0)\) を求めよ．
  #+end_quote

** COMMENT 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- サンプリング周波数と基本周波数
  #+begin_quote
  サンプルの区間幅は \(1/f_s\) [s] なので，
  長さ \(N\) の信号は \(N/f_s\) [s] の信号となる．
  これが1周期に対応するので，基本周波数は \(f_s/N\) [Hz] となり，
  信号はこの高調波で展開される．
  #+end_quote

#+reveal: split
- 周波数の正負の関係
  #+begin_quote
  \(t\) を整数とすると \(e^{2\pi i t}=1\) であるから
  #+begin_src latex
    \begin{equation}
      e^{-i\frac{2\pi}{N}t}
      =e^{-i\frac{2\pi}{N}t}e^{2\pi i t}
      =e^{i\frac{2\pi}{N}(N{-}1)t}
    \end{equation}
  #+end_src
  となり \(k=N{-}1\) である．
  #+end_quote
  - これは標本点のみでは周波数が \(-1\) なのか \(N{-}1\)
    なのか区別できないことを示している．
  - 一般に \(n\ge N/2\) 以上の高調波は負の周波数に対応させ，
    信号は \(f_{s}/2\) 未満の(正負の)周波数で展開される．
  - 標本化定理の結果と比較せよ．

** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 基本周波数の性質
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      \alpha=e^{i\frac{2\pi}{N}}
    \end{equation}
  #+end_src
  と置くと，
  #+begin_src latex
    \begin{equation}
      \alpha^{N}=e^{2\pi i}=1 \quad(\text{1の\(N\)乗根の一つ})
    \end{equation}
  #+end_src
  となる．
  \(m\) を整数とするとき以下の値を求めよ．
  #+begin_src latex
    \begin{equation}
      1+\alpha^{m}+\alpha^{2m}+\dotsb+\alpha^{(N{-}1)m}
    \end{equation}
  #+end_src
  #+end_quote

** COMMENT 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 基本周波数の性質
  #+begin_quote
  \(k\) を整数として \(m=kN\) のとき (\(m\) が \(N\) の倍数)
  #+begin_src latex
    \begin{equation}
      \alpha^{m}=(\alpha^{N})^{k}=1
    \end{equation}
  #+end_src
  であるから，与式はNとなる．

  それ以外のとき，等比数列の和から
  #+begin_src latex
    \begin{align}
      \text{(与式)}
      &=\frac{1-\alpha^{mN}}{1-\alpha^{m}}
	=\frac{1-(\alpha^{N})^{m}}{1-\alpha^{m}}=0
    \end{align}
  #+end_src
  となる．
  #+end_quote


* 離散 Fourier 変換の行列表現
** 行列による表現
- \(N\) 乗根を用いた展開
  #+begin_quote
  \(\alpha\) を用いて定義式を書き下すと
  #+begin_src latex
    \begin{align}
      \hat{f}(n)
      &=\frac{1}{\sqrt{N}}\sum_{t=0}^{N{-}1}f(t)\alpha^{-nt}\\
      &=\frac{1}{\sqrt{N}}
	\left(
	f(0)\alpha^{-n\cdot0}+f(1)\alpha^{-n\cdot1}+
	f(2)\alpha^{-n\cdot2}+\right.\\
      &\qquad\qquad\left.\dotsb+f(N{-}1)\alpha^{-n\cdot(N{-}1)}\right)
    \end{align}
  #+end_src
  となる．
  #+end_quote

#+reveal: split
- 変換行列
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      F
      =
      \frac{1}{\sqrt{N}}
      \begin{pmatrix}
	1&1&1&\dots&1\\
	1&\alpha^{-1}&\alpha^{-2}&\dots&\alpha^{-(N{-}1)}\\
	\vdots&&&\ddots&\vdots\\
	1&\alpha^{-(N{-}1)}&\alpha^{-2(N{-}1)}&\dots&\alpha^{-(N{-}1)(N{-}1)}
      \end{pmatrix}
    \end{equation}
  #+end_src
  #+end_quote
  - 行列 \(F\) は \(N\times N\) の要素からなるが，
    \(\alpha\) の性質から値としては(1を含めて) \(N\) 種類しかない．

#+reveal: split
- 行列表現
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      \begin{pmatrix}
	\hat{f}(0)\\
	\hat{f}(1)\\
	\vdots\\
	\hat{f}(N{-}1)
      \end{pmatrix}
      =
      F
      \begin{pmatrix}
	f(0)\\
	f(1)\\
	\vdots\\
	f(N{-}1)
      \end{pmatrix}
    \end{equation}
    \begin{equation}
      \hat{\boldsymbol{f}}
      =F
      \boldsymbol{f}
    \end{equation}
  #+end_src
  #+end_quote

#+reveal: split
- 逆変換行列
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      F^{*}
      =\frac{1}{\sqrt{N}}
      \begin{pmatrix}
	1&1&1&\dots&1\\
	1&\alpha^{1}&\alpha^{2}&\dots&\alpha^{(N{-}1)}\\
	\vdots&&&\ddots&\vdots\\
	1&\alpha^{(N{-}1)}&\alpha^{2(N{-}1)}&\dots&\alpha^{(N{-}1)(N{-}1)}
      \end{pmatrix}
    \end{equation}
  #+end_src
  #+end_quote
- 行列表現
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      \boldsymbol{f}
      =F^{*}
      \hat{\boldsymbol{f}}
    \end{equation}
  #+end_src
  #+end_quote

** 変換と逆変換の関係
- 行列 \(F,F^{*}\) の積
  #+begin_quote
  #+begin_src latex
    \begin{multline}
      F^{*}F\\
      =\frac{1}{N}
      \begin{pmatrix}
	1&1&\dots&1\\
	1&\alpha^{1}&\dots&\alpha^{(N{-}1)}\\
	\vdots&&\ddots&\vdots\\
	1&\alpha^{(N{-}1)}&\dots&\alpha^{(N{-}1)(N{-}1)}
      \end{pmatrix}
      \begin{pmatrix}
	1&1&\dots&1\\
	1&\alpha^{-1}&\dots&\alpha^{-(N{-}1)}\\
	\vdots&&\ddots&\vdots\\
	1&\alpha^{-(N{-}1)}&\dots&\alpha^{-(N{-}1)(N{-}1)}
      \end{pmatrix}
    \end{multline}
  #+end_src
  #+end_quote

#+reveal: split
- \(i\) 行 \(j\) 列成分
  #+begin_quote
  #+begin_src latex
    \begin{align}
      (F^{*}F)_{ij}
      &=\frac{1}{N}
	\begin{pmatrix}
	  1&\alpha^{(i-1)}&\dots&\alpha^{(N{-}1)(i-1)}
	\end{pmatrix}
				  \begin{pmatrix}
				    1\\
				    \alpha^{-(j-1)}\\
				    \vdots\\
				    \alpha^{-(N{-}1)(j-1)}
				  \end{pmatrix}\\
      &=\frac{1}{N}
	\left(
	1+\alpha^{(i-j)}+\alpha^{2(i-j)}+
	\dots+\alpha^{(N{-}1)(i-j)}
	\right)\\
      &=
	\begin{cases}
	  1,&i=j\\
	  \frac{1}{N}\frac{1-\alpha^{N(i-j)}}{1-\alpha^{(i-j)}},&i\not=j
	\end{cases}
								  =
								  \begin{cases}
								    1,&i=j\\
								    0,&i\not=j
								  \end{cases}
    \end{align}
  #+end_src
  #+end_quote

#+reveal: split
- 逆も同様
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      (FF^{*})_{ij}
      =\begin{cases}
	1,&i=j\\
	0,&i\not=j
      \end{cases}
    \end{equation}
  #+end_src
  #+end_quote
- 変換は可逆となる
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      F^{*}\boldsymbol{\hat{f}}
      =
      F^{*}F\boldsymbol{f}
      =\boldsymbol{f}
    \end{equation}
  #+end_src
  #+begin_src latex
    \begin{equation}
      F\boldsymbol{f}
      =
      FF^{*}\boldsymbol{\hat{f}}
      =\boldsymbol{\hat{f}}
    \end{equation}
  #+end_src
  #+end_quote


* フィルタの表現
** フィルタ
- 定義
  #+begin_quote
  入力 \(f(t)\) を変換して出力 \(g(t)\) を生成する機構
  #+end_quote
- 線形性 
  #+begin_quote
  入力の線形結合がそのまま出力に反映される性質
  #+end_quote
- 時不変性
  #+begin_quote
  入力の時刻がずれた場合，出力も同じだけずれる性質
  #+end_quote

** デジタル信号におけるフィルタの表現
- 標本化されたフィルタの表現
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      g(t)=\sum_{s=t-N+1}^{t}f(s)h(t{-}s)
    \end{equation}
  #+end_src
  #+end_quote
  - \(f,g\) : 周期 \(N\) の入力・出力信号
  - \(h\) : 長さ \(N\) のインパルス応答

#+reveal: split
- 周期関数の畳み込みによる表現
  #+begin_quote
  #+begin_src latex
    \begin{align}
      g(t)
      &=f{*}h(t)\\
      &=\sum_{s=0}^{N-1}f(s)h(t{-}s)
	=\sum_{s=0}^{N-1}f(t{-}s)h(s),\\
      &\quad t=0,1,\dotsc,N-1
    \end{align}
  #+end_src
  #+end_quote
  - \(f,g,h\) : 周期 \(N\) の関数


* 演習
:PROPERTIES:
:reveal_background: #fef4f4
:END:
** 練習問題
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 離散 Fourier 変換によるフィルタの表現
  #+begin_quote
  \(f,g,h\) を長さ \(N\) のベクトルと考え，
  \(g\) の離散 Fourier 変換を
  \(f,h\) の離散 Fourier 変換で表しなさい．
  #+begin_src latex
    \begin{equation}
      g(t)=\sum_{s=0}^{N-1}f(s)h(t{-}s),
      \quad t=0,1,\dotsc,N-1
    \end{equation}
  #+end_src
  #+end_quote

** COMMENT 解答例
:PROPERTIES:
:reveal_background: #fef4f4
:END:
- 定義どおり展開していく
  #+begin_quote
  #+begin_src latex
    \begin{align}
      \hat{g}(n)
      &=\frac{1}{\sqrt{N}}\sum_{t=0}^{N{-}1}g(t)\alpha^{-nt}\\
      &=\frac{1}{\sqrt{N}}\sum_{t=0}^{N{-}1}
	\sum_{s=0}^{N-1}f(s)h(t{-}s)\alpha^{-n(t-s+s)}\\
      &=\frac{1}{\sqrt{N}}\sum_{t=0}^{N{-}1}
	\sum_{s=0}^{N-1}f(s)\alpha^{-ns}h(t{-}s)\alpha^{-n(t-s)}
    \end{align}
  #+end_src
  #+end_quote

#+reveal: split
- 周期 \(N\) の関数であることに注意する
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      \sum_{t=0}^{N-1}h(t{-}s)\alpha^{-n(t-s)}
      =\sum_{t=0}^{N-1}h(t)\alpha^{-nt}
      =\sqrt{N}\hat{h}(n)
    \end{equation}
    \begin{equation}
      \sum_{s=0}^{N-1}f(s)\alpha^{-ns}
      =\sqrt{N}\hat{f}(n)
    \end{equation}
    \begin{equation}
      \hat{g}(n)
      =\sqrt{N}\hat{f}(n)\hat{h}(n)
    \end{equation}
  #+end_src
  #+end_quote


* 窓関数
** 有限長のデータ
- 信号の一部を切り出す必要がある
  - 周期的な信号として扱う 
  - 有界な台を持つ信号として扱う
- 不連続点の問題
  - 高い周波数に対応
  - 標本化定理の仮定に抵触

** 窓関数
- 信号の切り出し
  #+begin_quote
  #+begin_src latex
    \begin{equation}
      f(t)=w(t)\tilde{f}(t)
    \end{equation}
  #+end_src
  #+end_quote
- 端点での不連続性を軽減するために導入
- 周波数特性の一部を改変することに注意
  - 矩形窓 (単純な切り出し)
  - gauss 窓
  - hann 窓
  - hamming 窓

** 窓関数を用いたデジタル信号処理
- 処理の流れ
  - 不連続性を緩和した系列の断片化 (窓関数)
  - デジタル信号処理 (フィルタ処理)
  - 切り出された断片を再構成 (重なりを考慮した合成処理)

#+NAME: fig:draw11
#+ATTR_HTML: :width 80%
#+ATTR_LATEX: :width 0.5\linewidth
[[file:figs/信号処理 11.png]]
** 矩形窓
#+begin_quote
#+begin_src latex
  \begin{equation}
    w(\tau)=\Xi_{(0,1)}(\tau)
  \end{equation}
#+end_src
#+end_quote
#+begin_leftcol
#+begin_src R :file figs/rect.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  wind <- c(0,rep(1,127),0)
  plot(wind, type="l", ylim=c(0,1), 
       col="blue", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,128), lab=c(0,1))
  title(xlab="時間", ylab="振幅")
#+end_src
#+CAPTION: 矩形窓
#+NAME: fig:rect
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/rect.png]]
#+end_leftcol
#+begin_rightcol
#+begin_src R :file figs/rect_freq.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  freq <- abs(fft(wind[1:128]))
  freq <- log(freq/freq[1]) # normalize
  plot(freq[1:64], type="l", # ylim=c(-20,0),
       col="orange", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,64), lab=c(0,1))
  title(xlab="周波数", ylab="ゲイン")
#+end_src
#+CAPTION: 周波数特性
#+NAME: fig:rect_freq
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/rect_freq.png]]
#+end_rightcol  

** gauss 窓
#+begin_quote
#+begin_src latex
  \begin{equation}
    w(\tau)=e^{-\frac{(\tau-0.5)^{2}}{\sigma^{2}}}
  \end{equation}
#+end_src
#+end_quote
#+begin_leftcol
#+begin_src R :file figs/gauss.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  wind <- exp(-(seq(0,1,len=128)-0.5)^2/0.3^2)
  plot(wind, type="l", ylim=c(0,1), 
       col="blue", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,128), lab=c(0,1))
  title(xlab="時間", ylab="振幅")
#+end_src
#+CAPTION: gauss 窓
#+NAME: fig:gauss
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/gauss.png]]
#+end_leftcol  
#+begin_rightcol
#+begin_src R :file figs/gauss_freq.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  freq <- abs(fft(wind[1:128]))
  freq <- log(freq/freq[1]) # normalize
  plot(freq[1:64], type="l", # ylim=c(-20,0),
       col="orange", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,64), lab=c(0,1))
  title(xlab="周波数", ylab="ゲイン")
#+end_src
#+CAPTION: 周波数特性
#+NAME: fig:gauss_freq
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/gauss_freq.png]]
#+end_rightcol  
     
** hann 窓
#+begin_quote
#+begin_src latex
  \begin{equation}
    w(\tau)=0.5-0.5\cos(2\pi\tau)
  \end{equation}
#+end_src
#+end_quote
#+begin_leftcol
#+begin_src R :file figs/hann.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  library(e1071)
  wind <- hanning.window(128)
  plot(wind, type="l", ylim=c(0,1),
       col="blue", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,128), lab=c(0,1))
  title(xlab="時間", ylab="振幅")
#+end_src
#+CAPTION: hann 窓
#+NAME: fig:hann
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/hann.png]]
#+end_leftcol  
#+begin_rightcol
#+begin_src R :file figs/hann_freq.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  freq <- abs(fft(wind[1:128]))
  freq <- log(freq/freq[1]) # normalize
  plot(freq[1:64], type="l", # ylim=c(-20,0),
       col="orange", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,64), lab=c(0,1))
  title(xlab="周波数", ylab="ゲイン")
#+end_src
#+CAPTION: 周波数特性
#+NAME: fig:hann_freq
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/hann_freq.png]]
#+end_rightcol  
     
** hamming 窓
#+begin_quote
#+begin_src latex
  \begin{equation}
    w(\tau)=0.54-0.46\cos(2\pi\tau)
  \end{equation}
#+end_src
#+end_quote
#+begin_leftcol
#+begin_src R :file figs/hamm.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  wind <- hamming.window(128)
  plot(wind, type="l", ylim=c(0,1),
       col="blue", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,128), lab=c(0,1))
  title(xlab="時間", ylab="振幅")
#+end_src
#+CAPTION: hamming 窓
#+NAME: fig:hamm
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/hamm.png]]
#+end_leftcol  
#+begin_rightcol
#+begin_src R :file figs/hamm_freq.png :exports results :results graphics
  par(family="HiraginoSans-W4")
  freq <- abs(fft(wind[1:128]))
  freq <- log(freq/freq[1]) # normalize
  plot(freq[1:64], type="l", # ylim=c(-20,0),
       col="orange", lwd=4, ann=FALSE, axes=FALSE)
  box()
  axis(1, at=c(1,64), lab=c(0,1))
  title(xlab="周波数", ylab="ゲイン")
#+end_src
#+CAPTION: 周波数特性
#+NAME: fig:hamm_freq
#+ATTR_HTML: :width 100%
#+ATTR_LATEX: :width 0.6\linewidth
[[file:figs/hamm_freq.png]]
#+end_rightcol  
     


* 今回のまとめ
- 離散 Fourier 変換
  - 変換と逆変換
  - 行列による表現
- 窓関数
  - 切り出すときの不連続性の軽減
  - 周波数特性を考慮した窓関数


* Footnotes
* COMMENT ローカル変数
# Local Variables:
# org-latex-listings: minted
# End:
      
  
   
       
